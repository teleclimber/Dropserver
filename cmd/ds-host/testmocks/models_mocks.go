// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teleclimber/DropServer/cmd/ds-host/testmocks (interfaces: CookieModel,UserModel,SettingsModel,UserInvitationModel,AppFilesModel,AppModel,AppspaceModel,RemoteAppspaceModel,AppspaceFilesModel,AppspaceTSNetModel,ContactModel,DropIDModel,MigrationJobModel,SandboxRuns)

// Package testmocks is a generated GoMock package.
package testmocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/teleclimber/DropServer/cmd/ds-host/domain"
	nulltypes "github.com/teleclimber/DropServer/internal/nulltypes"
	io "io"
	reflect "reflect"
	time "time"
)

// MockCookieModel is a mock of CookieModel interface
type MockCookieModel struct {
	ctrl     *gomock.Controller
	recorder *MockCookieModelMockRecorder
}

// MockCookieModelMockRecorder is the mock recorder for MockCookieModel
type MockCookieModelMockRecorder struct {
	mock *MockCookieModel
}

// NewMockCookieModel creates a new mock instance
func NewMockCookieModel(ctrl *gomock.Controller) *MockCookieModel {
	mock := &MockCookieModel{ctrl: ctrl}
	mock.recorder = &MockCookieModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCookieModel) EXPECT() *MockCookieModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCookieModel) Create(arg0 domain.Cookie) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCookieModelMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCookieModel)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockCookieModel) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCookieModelMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCookieModel)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockCookieModel) Get(arg0 string) (domain.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCookieModelMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCookieModel)(nil).Get), arg0)
}

// UpdateExpires mocks base method
func (m *MockCookieModel) UpdateExpires(arg0 string, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpires", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExpires indicates an expected call of UpdateExpires
func (mr *MockCookieModelMockRecorder) UpdateExpires(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpires", reflect.TypeOf((*MockCookieModel)(nil).UpdateExpires), arg0, arg1)
}

// MockUserModel is a mock of UserModel interface
type MockUserModel struct {
	ctrl     *gomock.Controller
	recorder *MockUserModelMockRecorder
}

// MockUserModelMockRecorder is the mock recorder for MockUserModel
type MockUserModelMockRecorder struct {
	mock *MockUserModel
}

// NewMockUserModel creates a new mock instance
func NewMockUserModel(ctrl *gomock.Controller) *MockUserModel {
	mock := &MockUserModel{ctrl: ctrl}
	mock.recorder = &MockUserModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserModel) EXPECT() *MockUserModelMockRecorder {
	return m.recorder
}

// CreateWithEmail mocks base method
func (m *MockUserModel) CreateWithEmail(arg0, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithEmail", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithEmail indicates an expected call of CreateWithEmail
func (mr *MockUserModelMockRecorder) CreateWithEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithEmail", reflect.TypeOf((*MockUserModel)(nil).CreateWithEmail), arg0, arg1)
}

// CreateWithTSNet mocks base method
func (m *MockUserModel) CreateWithTSNet(arg0, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithTSNet", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithTSNet indicates an expected call of CreateWithTSNet
func (mr *MockUserModelMockRecorder) CreateWithTSNet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithTSNet", reflect.TypeOf((*MockUserModel)(nil).CreateWithTSNet), arg0, arg1)
}

// DeleteAdmin mocks base method
func (m *MockUserModel) DeleteAdmin(arg0 domain.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin
func (mr *MockUserModelMockRecorder) DeleteAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockUserModel)(nil).DeleteAdmin), arg0)
}

// DeleteTSNet mocks base method
func (m *MockUserModel) DeleteTSNet(arg0 domain.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTSNet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTSNet indicates an expected call of DeleteTSNet
func (mr *MockUserModelMockRecorder) DeleteTSNet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTSNet", reflect.TypeOf((*MockUserModel)(nil).DeleteTSNet), arg0)
}

// GetAll mocks base method
func (m *MockUserModel) GetAll() ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUserModelMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserModel)(nil).GetAll))
}

// GetAllAdmins mocks base method
func (m *MockUserModel) GetAllAdmins() ([]domain.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAdmins")
	ret0, _ := ret[0].([]domain.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAdmins indicates an expected call of GetAllAdmins
func (mr *MockUserModelMockRecorder) GetAllAdmins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAdmins", reflect.TypeOf((*MockUserModel)(nil).GetAllAdmins))
}

// GetFromEmail mocks base method
func (m *MockUserModel) GetFromEmail(arg0 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromEmail", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromEmail indicates an expected call of GetFromEmail
func (mr *MockUserModelMockRecorder) GetFromEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromEmail", reflect.TypeOf((*MockUserModel)(nil).GetFromEmail), arg0)
}

// GetFromEmailPassword mocks base method
func (m *MockUserModel) GetFromEmailPassword(arg0, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromEmailPassword", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromEmailPassword indicates an expected call of GetFromEmailPassword
func (mr *MockUserModelMockRecorder) GetFromEmailPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromEmailPassword", reflect.TypeOf((*MockUserModel)(nil).GetFromEmailPassword), arg0, arg1)
}

// GetFromID mocks base method
func (m *MockUserModel) GetFromID(arg0 domain.UserID) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromID", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromID indicates an expected call of GetFromID
func (mr *MockUserModelMockRecorder) GetFromID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromID", reflect.TypeOf((*MockUserModel)(nil).GetFromID), arg0)
}

// GetFromTSNet mocks base method
func (m *MockUserModel) GetFromTSNet(arg0 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromTSNet", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromTSNet indicates an expected call of GetFromTSNet
func (mr *MockUserModelMockRecorder) GetFromTSNet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromTSNet", reflect.TypeOf((*MockUserModel)(nil).GetFromTSNet), arg0)
}

// IsAdmin mocks base method
func (m *MockUserModel) IsAdmin(arg0 domain.UserID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAdmin indicates an expected call of IsAdmin
func (mr *MockUserModelMockRecorder) IsAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockUserModel)(nil).IsAdmin), arg0)
}

// MakeAdmin mocks base method
func (m *MockUserModel) MakeAdmin(arg0 domain.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeAdmin", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeAdmin indicates an expected call of MakeAdmin
func (mr *MockUserModelMockRecorder) MakeAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeAdmin", reflect.TypeOf((*MockUserModel)(nil).MakeAdmin), arg0)
}

// UpdateEmail mocks base method
func (m *MockUserModel) UpdateEmail(arg0 domain.UserID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail
func (mr *MockUserModelMockRecorder) UpdateEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockUserModel)(nil).UpdateEmail), arg0, arg1)
}

// UpdatePassword mocks base method
func (m *MockUserModel) UpdatePassword(arg0 domain.UserID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *MockUserModelMockRecorder) UpdatePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserModel)(nil).UpdatePassword), arg0, arg1)
}

// UpdateTSNet mocks base method
func (m *MockUserModel) UpdateTSNet(arg0 domain.UserID, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTSNet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTSNet indicates an expected call of UpdateTSNet
func (mr *MockUserModelMockRecorder) UpdateTSNet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTSNet", reflect.TypeOf((*MockUserModel)(nil).UpdateTSNet), arg0, arg1, arg2)
}

// MockSettingsModel is a mock of SettingsModel interface
type MockSettingsModel struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsModelMockRecorder
}

// MockSettingsModelMockRecorder is the mock recorder for MockSettingsModel
type MockSettingsModelMockRecorder struct {
	mock *MockSettingsModel
}

// NewMockSettingsModel creates a new mock instance
func NewMockSettingsModel(ctrl *gomock.Controller) *MockSettingsModel {
	mock := &MockSettingsModel{ctrl: ctrl}
	mock.recorder = &MockSettingsModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSettingsModel) EXPECT() *MockSettingsModelMockRecorder {
	return m.recorder
}

// DeleteTSNet mocks base method
func (m *MockSettingsModel) DeleteTSNet() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTSNet")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTSNet indicates an expected call of DeleteTSNet
func (mr *MockSettingsModelMockRecorder) DeleteTSNet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTSNet", reflect.TypeOf((*MockSettingsModel)(nil).DeleteTSNet))
}

// Get mocks base method
func (m *MockSettingsModel) Get() (domain.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(domain.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSettingsModelMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSettingsModel)(nil).Get))
}

// GetTSNet mocks base method
func (m *MockSettingsModel) GetTSNet() (domain.TSNetCommon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTSNet")
	ret0, _ := ret[0].(domain.TSNetCommon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTSNet indicates an expected call of GetTSNet
func (mr *MockSettingsModelMockRecorder) GetTSNet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTSNet", reflect.TypeOf((*MockSettingsModel)(nil).GetTSNet))
}

// SetRegistrationOpen mocks base method
func (m *MockSettingsModel) SetRegistrationOpen(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRegistrationOpen", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRegistrationOpen indicates an expected call of SetRegistrationOpen
func (mr *MockSettingsModelMockRecorder) SetRegistrationOpen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRegistrationOpen", reflect.TypeOf((*MockSettingsModel)(nil).SetRegistrationOpen), arg0)
}

// SetTSNet mocks base method
func (m *MockSettingsModel) SetTSNet(arg0 domain.TSNetCommon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTSNet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTSNet indicates an expected call of SetTSNet
func (mr *MockSettingsModelMockRecorder) SetTSNet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTSNet", reflect.TypeOf((*MockSettingsModel)(nil).SetTSNet), arg0)
}

// SetTSNetConnect mocks base method
func (m *MockSettingsModel) SetTSNetConnect(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTSNetConnect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTSNetConnect indicates an expected call of SetTSNetConnect
func (mr *MockSettingsModelMockRecorder) SetTSNetConnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTSNetConnect", reflect.TypeOf((*MockSettingsModel)(nil).SetTSNetConnect), arg0)
}

// MockUserInvitationModel is a mock of UserInvitationModel interface
type MockUserInvitationModel struct {
	ctrl     *gomock.Controller
	recorder *MockUserInvitationModelMockRecorder
}

// MockUserInvitationModelMockRecorder is the mock recorder for MockUserInvitationModel
type MockUserInvitationModelMockRecorder struct {
	mock *MockUserInvitationModel
}

// NewMockUserInvitationModel creates a new mock instance
func NewMockUserInvitationModel(ctrl *gomock.Controller) *MockUserInvitationModel {
	mock := &MockUserInvitationModel{ctrl: ctrl}
	mock.recorder = &MockUserInvitationModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserInvitationModel) EXPECT() *MockUserInvitationModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserInvitationModel) Create(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserInvitationModelMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserInvitationModel)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockUserInvitationModel) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserInvitationModelMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserInvitationModel)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockUserInvitationModel) Get(arg0 string) (domain.UserInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.UserInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserInvitationModelMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserInvitationModel)(nil).Get), arg0)
}

// GetAll mocks base method
func (m *MockUserInvitationModel) GetAll() ([]domain.UserInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.UserInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUserInvitationModelMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserInvitationModel)(nil).GetAll))
}

// PrepareStatements mocks base method
func (m *MockUserInvitationModel) PrepareStatements() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrepareStatements")
}

// PrepareStatements indicates an expected call of PrepareStatements
func (mr *MockUserInvitationModelMockRecorder) PrepareStatements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStatements", reflect.TypeOf((*MockUserInvitationModel)(nil).PrepareStatements))
}

// MockAppFilesModel is a mock of AppFilesModel interface
type MockAppFilesModel struct {
	ctrl     *gomock.Controller
	recorder *MockAppFilesModelMockRecorder
}

// MockAppFilesModelMockRecorder is the mock recorder for MockAppFilesModel
type MockAppFilesModelMockRecorder struct {
	mock *MockAppFilesModel
}

// NewMockAppFilesModel creates a new mock instance
func NewMockAppFilesModel(ctrl *gomock.Controller) *MockAppFilesModel {
	mock := &MockAppFilesModel{ctrl: ctrl}
	mock.recorder = &MockAppFilesModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppFilesModel) EXPECT() *MockAppFilesModelMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockAppFilesModel) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAppFilesModelMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppFilesModel)(nil).Delete), arg0)
}

// ExtractPackage mocks base method
func (m *MockAppFilesModel) ExtractPackage(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractPackage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtractPackage indicates an expected call of ExtractPackage
func (mr *MockAppFilesModelMockRecorder) ExtractPackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractPackage", reflect.TypeOf((*MockAppFilesModel)(nil).ExtractPackage), arg0)
}

// ReadManifest mocks base method
func (m *MockAppFilesModel) ReadManifest(arg0 string) (*domain.AppVersionManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadManifest", arg0)
	ret0, _ := ret[0].(*domain.AppVersionManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadManifest indicates an expected call of ReadManifest
func (mr *MockAppFilesModelMockRecorder) ReadManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadManifest", reflect.TypeOf((*MockAppFilesModel)(nil).ReadManifest), arg0)
}

// ReadRoutes mocks base method
func (m *MockAppFilesModel) ReadRoutes(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRoutes", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRoutes indicates an expected call of ReadRoutes
func (mr *MockAppFilesModelMockRecorder) ReadRoutes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRoutes", reflect.TypeOf((*MockAppFilesModel)(nil).ReadRoutes), arg0)
}

// SavePackage mocks base method
func (m *MockAppFilesModel) SavePackage(arg0 io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePackage", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePackage indicates an expected call of SavePackage
func (mr *MockAppFilesModelMockRecorder) SavePackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePackage", reflect.TypeOf((*MockAppFilesModel)(nil).SavePackage), arg0)
}

// WriteRoutes mocks base method
func (m *MockAppFilesModel) WriteRoutes(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRoutes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRoutes indicates an expected call of WriteRoutes
func (mr *MockAppFilesModelMockRecorder) WriteRoutes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRoutes", reflect.TypeOf((*MockAppFilesModel)(nil).WriteRoutes), arg0, arg1)
}

// MockAppModel is a mock of AppModel interface
type MockAppModel struct {
	ctrl     *gomock.Controller
	recorder *MockAppModelMockRecorder
}

// MockAppModelMockRecorder is the mock recorder for MockAppModel
type MockAppModelMockRecorder struct {
	mock *MockAppModel
}

// NewMockAppModel creates a new mock instance
func NewMockAppModel(ctrl *gomock.Controller) *MockAppModel {
	mock := &MockAppModel{ctrl: ctrl}
	mock.recorder = &MockAppModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppModel) EXPECT() *MockAppModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAppModel) Create(arg0 domain.UserID) (domain.AppID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(domain.AppID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAppModelMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAppModel)(nil).Create), arg0)
}

// CreateFromURL mocks base method
func (m *MockAppModel) CreateFromURL(arg0 domain.UserID, arg1 string, arg2 bool, arg3 domain.AppListingFetch) (domain.AppID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFromURL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(domain.AppID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFromURL indicates an expected call of CreateFromURL
func (mr *MockAppModelMockRecorder) CreateFromURL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFromURL", reflect.TypeOf((*MockAppModel)(nil).CreateFromURL), arg0, arg1, arg2, arg3)
}

// CreateVersion mocks base method
func (m *MockAppModel) CreateVersion(arg0 domain.AppID, arg1 string, arg2 domain.AppVersionManifest) (domain.AppVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVersion indicates an expected call of CreateVersion
func (mr *MockAppModelMockRecorder) CreateVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVersion", reflect.TypeOf((*MockAppModel)(nil).CreateVersion), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockAppModel) Delete(arg0 domain.AppID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAppModelMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppModel)(nil).Delete), arg0)
}

// DeleteVersion mocks base method
func (m *MockAppModel) DeleteVersion(arg0 domain.AppID, arg1 domain.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVersion indicates an expected call of DeleteVersion
func (mr *MockAppModelMockRecorder) DeleteVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVersion", reflect.TypeOf((*MockAppModel)(nil).DeleteVersion), arg0, arg1)
}

// GetAppUrlData mocks base method
func (m *MockAppModel) GetAppUrlData(arg0 domain.AppID) (domain.AppURLData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppUrlData", arg0)
	ret0, _ := ret[0].(domain.AppURLData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppUrlData indicates an expected call of GetAppUrlData
func (mr *MockAppModelMockRecorder) GetAppUrlData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppUrlData", reflect.TypeOf((*MockAppModel)(nil).GetAppUrlData), arg0)
}

// GetAppUrlListing mocks base method
func (m *MockAppModel) GetAppUrlListing(arg0 domain.AppID) (domain.AppListing, domain.AppURLData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppUrlListing", arg0)
	ret0, _ := ret[0].(domain.AppListing)
	ret1, _ := ret[1].(domain.AppURLData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppUrlListing indicates an expected call of GetAppUrlListing
func (mr *MockAppModelMockRecorder) GetAppUrlListing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppUrlListing", reflect.TypeOf((*MockAppModel)(nil).GetAppUrlListing), arg0)
}

// GetCurrentVersion mocks base method
func (m *MockAppModel) GetCurrentVersion(arg0 domain.AppID) (domain.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentVersion", arg0)
	ret0, _ := ret[0].(domain.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentVersion indicates an expected call of GetCurrentVersion
func (mr *MockAppModelMockRecorder) GetCurrentVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentVersion", reflect.TypeOf((*MockAppModel)(nil).GetCurrentVersion), arg0)
}

// GetForOwner mocks base method
func (m *MockAppModel) GetForOwner(arg0 domain.UserID) ([]*domain.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForOwner", arg0)
	ret0, _ := ret[0].([]*domain.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForOwner indicates an expected call of GetForOwner
func (mr *MockAppModelMockRecorder) GetForOwner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForOwner", reflect.TypeOf((*MockAppModel)(nil).GetForOwner), arg0)
}

// GetFromID mocks base method
func (m *MockAppModel) GetFromID(arg0 domain.AppID) (domain.App, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromID", arg0)
	ret0, _ := ret[0].(domain.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromID indicates an expected call of GetFromID
func (mr *MockAppModelMockRecorder) GetFromID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromID", reflect.TypeOf((*MockAppModel)(nil).GetFromID), arg0)
}

// GetVersion mocks base method
func (m *MockAppModel) GetVersion(arg0 domain.AppID, arg1 domain.Version) (domain.AppVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", arg0, arg1)
	ret0, _ := ret[0].(domain.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion
func (mr *MockAppModelMockRecorder) GetVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockAppModel)(nil).GetVersion), arg0, arg1)
}

// GetVersionForUI mocks base method
func (m *MockAppModel) GetVersionForUI(arg0 domain.AppID, arg1 domain.Version) (domain.AppVersionUI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionForUI", arg0, arg1)
	ret0, _ := ret[0].(domain.AppVersionUI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionForUI indicates an expected call of GetVersionForUI
func (mr *MockAppModelMockRecorder) GetVersionForUI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionForUI", reflect.TypeOf((*MockAppModel)(nil).GetVersionForUI), arg0, arg1)
}

// GetVersionsForApp mocks base method
func (m *MockAppModel) GetVersionsForApp(arg0 domain.AppID) ([]*domain.AppVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionsForApp", arg0)
	ret0, _ := ret[0].([]*domain.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionsForApp indicates an expected call of GetVersionsForApp
func (mr *MockAppModelMockRecorder) GetVersionsForApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionsForApp", reflect.TypeOf((*MockAppModel)(nil).GetVersionsForApp), arg0)
}

// GetVersionsForUIForApp mocks base method
func (m *MockAppModel) GetVersionsForUIForApp(arg0 domain.AppID) ([]domain.AppVersionUI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionsForUIForApp", arg0)
	ret0, _ := ret[0].([]domain.AppVersionUI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionsForUIForApp indicates an expected call of GetVersionsForUIForApp
func (mr *MockAppModelMockRecorder) GetVersionsForUIForApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionsForUIForApp", reflect.TypeOf((*MockAppModel)(nil).GetVersionsForUIForApp), arg0)
}

// SetLastFetch mocks base method
func (m *MockAppModel) SetLastFetch(arg0 domain.AppID, arg1 time.Time, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastFetch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastFetch indicates an expected call of SetLastFetch
func (mr *MockAppModelMockRecorder) SetLastFetch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastFetch", reflect.TypeOf((*MockAppModel)(nil).SetLastFetch), arg0, arg1, arg2)
}

// SetListing mocks base method
func (m *MockAppModel) SetListing(arg0 domain.AppID, arg1 domain.AppListingFetch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetListing", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetListing indicates an expected call of SetListing
func (mr *MockAppModelMockRecorder) SetListing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetListing", reflect.TypeOf((*MockAppModel)(nil).SetListing), arg0, arg1)
}

// SetNewUrl mocks base method
func (m *MockAppModel) SetNewUrl(arg0 domain.AppID, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewUrl", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNewUrl indicates an expected call of SetNewUrl
func (mr *MockAppModelMockRecorder) SetNewUrl(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewUrl", reflect.TypeOf((*MockAppModel)(nil).SetNewUrl), arg0, arg1, arg2)
}

// UpdateAutomatic mocks base method
func (m *MockAppModel) UpdateAutomatic(arg0 domain.AppID, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAutomatic", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAutomatic indicates an expected call of UpdateAutomatic
func (mr *MockAppModelMockRecorder) UpdateAutomatic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAutomatic", reflect.TypeOf((*MockAppModel)(nil).UpdateAutomatic), arg0, arg1)
}

// UpdateURL mocks base method
func (m *MockAppModel) UpdateURL(arg0 domain.AppID, arg1 string, arg2 domain.AppListingFetch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateURL indicates an expected call of UpdateURL
func (mr *MockAppModelMockRecorder) UpdateURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateURL", reflect.TypeOf((*MockAppModel)(nil).UpdateURL), arg0, arg1, arg2)
}

// MockAppspaceModel is a mock of AppspaceModel interface
type MockAppspaceModel struct {
	ctrl     *gomock.Controller
	recorder *MockAppspaceModelMockRecorder
}

// MockAppspaceModelMockRecorder is the mock recorder for MockAppspaceModel
type MockAppspaceModelMockRecorder struct {
	mock *MockAppspaceModel
}

// NewMockAppspaceModel creates a new mock instance
func NewMockAppspaceModel(ctrl *gomock.Controller) *MockAppspaceModel {
	mock := &MockAppspaceModel{ctrl: ctrl}
	mock.recorder = &MockAppspaceModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppspaceModel) EXPECT() *MockAppspaceModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAppspaceModel) Create(arg0 domain.Appspace) (*domain.Appspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*domain.Appspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAppspaceModelMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAppspaceModel)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockAppspaceModel) Delete(arg0 domain.AppspaceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAppspaceModelMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppspaceModel)(nil).Delete), arg0)
}

// GetAll mocks base method
func (m *MockAppspaceModel) GetAll() ([]domain.Appspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Appspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockAppspaceModelMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAppspaceModel)(nil).GetAll))
}

// GetForApp mocks base method
func (m *MockAppspaceModel) GetForApp(arg0 domain.AppID) ([]*domain.Appspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForApp", arg0)
	ret0, _ := ret[0].([]*domain.Appspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForApp indicates an expected call of GetForApp
func (mr *MockAppspaceModelMockRecorder) GetForApp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForApp", reflect.TypeOf((*MockAppspaceModel)(nil).GetForApp), arg0)
}

// GetForAppVersion mocks base method
func (m *MockAppspaceModel) GetForAppVersion(arg0 domain.AppID, arg1 domain.Version) ([]*domain.Appspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForAppVersion", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Appspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForAppVersion indicates an expected call of GetForAppVersion
func (mr *MockAppspaceModelMockRecorder) GetForAppVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForAppVersion", reflect.TypeOf((*MockAppspaceModel)(nil).GetForAppVersion), arg0, arg1)
}

// GetForOwner mocks base method
func (m *MockAppspaceModel) GetForOwner(arg0 domain.UserID) ([]*domain.Appspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForOwner", arg0)
	ret0, _ := ret[0].([]*domain.Appspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForOwner indicates an expected call of GetForOwner
func (mr *MockAppspaceModelMockRecorder) GetForOwner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForOwner", reflect.TypeOf((*MockAppspaceModel)(nil).GetForOwner), arg0)
}

// GetFromDomain mocks base method
func (m *MockAppspaceModel) GetFromDomain(arg0 string) (*domain.Appspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromDomain", arg0)
	ret0, _ := ret[0].(*domain.Appspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromDomain indicates an expected call of GetFromDomain
func (mr *MockAppspaceModelMockRecorder) GetFromDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromDomain", reflect.TypeOf((*MockAppspaceModel)(nil).GetFromDomain), arg0)
}

// GetFromID mocks base method
func (m *MockAppspaceModel) GetFromID(arg0 domain.AppspaceID) (*domain.Appspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromID", arg0)
	ret0, _ := ret[0].(*domain.Appspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFromID indicates an expected call of GetFromID
func (mr *MockAppspaceModelMockRecorder) GetFromID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromID", reflect.TypeOf((*MockAppspaceModel)(nil).GetFromID), arg0)
}

// Pause mocks base method
func (m *MockAppspaceModel) Pause(arg0 domain.AppspaceID, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause
func (mr *MockAppspaceModelMockRecorder) Pause(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockAppspaceModel)(nil).Pause), arg0, arg1)
}

// SetVersion mocks base method
func (m *MockAppspaceModel) SetVersion(arg0 domain.AppspaceID, arg1 domain.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVersion indicates an expected call of SetVersion
func (mr *MockAppspaceModelMockRecorder) SetVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersion", reflect.TypeOf((*MockAppspaceModel)(nil).SetVersion), arg0, arg1)
}

// MockRemoteAppspaceModel is a mock of RemoteAppspaceModel interface
type MockRemoteAppspaceModel struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteAppspaceModelMockRecorder
}

// MockRemoteAppspaceModelMockRecorder is the mock recorder for MockRemoteAppspaceModel
type MockRemoteAppspaceModelMockRecorder struct {
	mock *MockRemoteAppspaceModel
}

// NewMockRemoteAppspaceModel creates a new mock instance
func NewMockRemoteAppspaceModel(ctrl *gomock.Controller) *MockRemoteAppspaceModel {
	mock := &MockRemoteAppspaceModel{ctrl: ctrl}
	mock.recorder = &MockRemoteAppspaceModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteAppspaceModel) EXPECT() *MockRemoteAppspaceModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRemoteAppspaceModel) Create(arg0 domain.UserID, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRemoteAppspaceModelMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRemoteAppspaceModel)(nil).Create), arg0, arg1, arg2, arg3)
}

// Delete mocks base method
func (m *MockRemoteAppspaceModel) Delete(arg0 domain.UserID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRemoteAppspaceModelMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRemoteAppspaceModel)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockRemoteAppspaceModel) Get(arg0 domain.UserID, arg1 string) (domain.RemoteAppspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(domain.RemoteAppspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRemoteAppspaceModelMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRemoteAppspaceModel)(nil).Get), arg0, arg1)
}

// GetForUser mocks base method
func (m *MockRemoteAppspaceModel) GetForUser(arg0 domain.UserID) ([]domain.RemoteAppspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForUser", arg0)
	ret0, _ := ret[0].([]domain.RemoteAppspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForUser indicates an expected call of GetForUser
func (mr *MockRemoteAppspaceModelMockRecorder) GetForUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForUser", reflect.TypeOf((*MockRemoteAppspaceModel)(nil).GetForUser), arg0)
}

// MockAppspaceFilesModel is a mock of AppspaceFilesModel interface
type MockAppspaceFilesModel struct {
	ctrl     *gomock.Controller
	recorder *MockAppspaceFilesModelMockRecorder
}

// MockAppspaceFilesModelMockRecorder is the mock recorder for MockAppspaceFilesModel
type MockAppspaceFilesModelMockRecorder struct {
	mock *MockAppspaceFilesModel
}

// NewMockAppspaceFilesModel creates a new mock instance
func NewMockAppspaceFilesModel(ctrl *gomock.Controller) *MockAppspaceFilesModel {
	mock := &MockAppspaceFilesModel{ctrl: ctrl}
	mock.recorder = &MockAppspaceFilesModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppspaceFilesModel) EXPECT() *MockAppspaceFilesModelMockRecorder {
	return m.recorder
}

// CheckDataFiles mocks base method
func (m *MockAppspaceFilesModel) CheckDataFiles(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDataFiles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDataFiles indicates an expected call of CheckDataFiles
func (mr *MockAppspaceFilesModelMockRecorder) CheckDataFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDataFiles", reflect.TypeOf((*MockAppspaceFilesModel)(nil).CheckDataFiles), arg0)
}

// CreateLocation mocks base method
func (m *MockAppspaceFilesModel) CreateLocation() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation
func (mr *MockAppspaceFilesModelMockRecorder) CreateLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockAppspaceFilesModel)(nil).CreateLocation))
}

// ReplaceData mocks base method
func (m *MockAppspaceFilesModel) ReplaceData(arg0 domain.Appspace, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceData indicates an expected call of ReplaceData
func (mr *MockAppspaceFilesModelMockRecorder) ReplaceData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceData", reflect.TypeOf((*MockAppspaceFilesModel)(nil).ReplaceData), arg0, arg1)
}

// MockAppspaceTSNetModel is a mock of AppspaceTSNetModel interface
type MockAppspaceTSNetModel struct {
	ctrl     *gomock.Controller
	recorder *MockAppspaceTSNetModelMockRecorder
}

// MockAppspaceTSNetModelMockRecorder is the mock recorder for MockAppspaceTSNetModel
type MockAppspaceTSNetModelMockRecorder struct {
	mock *MockAppspaceTSNetModel
}

// NewMockAppspaceTSNetModel creates a new mock instance
func NewMockAppspaceTSNetModel(ctrl *gomock.Controller) *MockAppspaceTSNetModel {
	mock := &MockAppspaceTSNetModel{ctrl: ctrl}
	mock.recorder = &MockAppspaceTSNetModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppspaceTSNetModel) EXPECT() *MockAppspaceTSNetModelMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockAppspaceTSNetModel) CreateOrUpdate(arg0 domain.AppspaceID, arg1, arg2 string, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockAppspaceTSNetModelMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockAppspaceTSNetModel)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3)
}

// Delete mocks base method
func (m *MockAppspaceTSNetModel) Delete(arg0 domain.AppspaceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAppspaceTSNetModelMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppspaceTSNetModel)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockAppspaceTSNetModel) Get(arg0 domain.AppspaceID) (domain.AppspaceTSNet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.AppspaceTSNet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAppspaceTSNetModelMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAppspaceTSNetModel)(nil).Get), arg0)
}

// GetAllConnect mocks base method
func (m *MockAppspaceTSNetModel) GetAllConnect() ([]domain.AppspaceTSNet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllConnect")
	ret0, _ := ret[0].([]domain.AppspaceTSNet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllConnect indicates an expected call of GetAllConnect
func (mr *MockAppspaceTSNetModelMockRecorder) GetAllConnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllConnect", reflect.TypeOf((*MockAppspaceTSNetModel)(nil).GetAllConnect))
}

// SetConnect mocks base method
func (m *MockAppspaceTSNetModel) SetConnect(arg0 domain.AppspaceID, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConnect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConnect indicates an expected call of SetConnect
func (mr *MockAppspaceTSNetModelMockRecorder) SetConnect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnect", reflect.TypeOf((*MockAppspaceTSNetModel)(nil).SetConnect), arg0, arg1)
}

// MockContactModel is a mock of ContactModel interface
type MockContactModel struct {
	ctrl     *gomock.Controller
	recorder *MockContactModelMockRecorder
}

// MockContactModelMockRecorder is the mock recorder for MockContactModel
type MockContactModelMockRecorder struct {
	mock *MockContactModel
}

// NewMockContactModel creates a new mock instance
func NewMockContactModel(ctrl *gomock.Controller) *MockContactModel {
	mock := &MockContactModel{ctrl: ctrl}
	mock.recorder = &MockContactModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContactModel) EXPECT() *MockContactModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockContactModel) Create(arg0 domain.UserID, arg1, arg2 string) (domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockContactModelMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContactModel)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockContactModel) Delete(arg0 domain.UserID, arg1 domain.ContactID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockContactModelMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContactModel)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockContactModel) Get(arg0 domain.ContactID) (domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockContactModelMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContactModel)(nil).Get), arg0)
}

// GetForUser mocks base method
func (m *MockContactModel) GetForUser(arg0 domain.UserID) ([]domain.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForUser", arg0)
	ret0, _ := ret[0].([]domain.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForUser indicates an expected call of GetForUser
func (mr *MockContactModelMockRecorder) GetForUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForUser", reflect.TypeOf((*MockContactModel)(nil).GetForUser), arg0)
}

// Update mocks base method
func (m *MockContactModel) Update(arg0 domain.UserID, arg1 domain.ContactID, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockContactModelMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContactModel)(nil).Update), arg0, arg1, arg2, arg3)
}

// MockDropIDModel is a mock of DropIDModel interface
type MockDropIDModel struct {
	ctrl     *gomock.Controller
	recorder *MockDropIDModelMockRecorder
}

// MockDropIDModelMockRecorder is the mock recorder for MockDropIDModel
type MockDropIDModelMockRecorder struct {
	mock *MockDropIDModel
}

// NewMockDropIDModel creates a new mock instance
func NewMockDropIDModel(ctrl *gomock.Controller) *MockDropIDModel {
	mock := &MockDropIDModel{ctrl: ctrl}
	mock.recorder = &MockDropIDModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDropIDModel) EXPECT() *MockDropIDModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDropIDModel) Create(arg0 domain.UserID, arg1, arg2, arg3 string) (domain.DropID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(domain.DropID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockDropIDModelMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDropIDModel)(nil).Create), arg0, arg1, arg2, arg3)
}

// Delete mocks base method
func (m *MockDropIDModel) Delete(arg0 domain.UserID, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDropIDModelMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDropIDModel)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockDropIDModel) Get(arg0, arg1 string) (domain.DropID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(domain.DropID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDropIDModelMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDropIDModel)(nil).Get), arg0, arg1)
}

// GetForUser mocks base method
func (m *MockDropIDModel) GetForUser(arg0 domain.UserID) ([]domain.DropID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForUser", arg0)
	ret0, _ := ret[0].([]domain.DropID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForUser indicates an expected call of GetForUser
func (mr *MockDropIDModelMockRecorder) GetForUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForUser", reflect.TypeOf((*MockDropIDModel)(nil).GetForUser), arg0)
}

// Update mocks base method
func (m *MockDropIDModel) Update(arg0 domain.UserID, arg1, arg2, arg3 string) (domain.DropID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(domain.DropID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockDropIDModelMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDropIDModel)(nil).Update), arg0, arg1, arg2, arg3)
}

// MockMigrationJobModel is a mock of MigrationJobModel interface
type MockMigrationJobModel struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationJobModelMockRecorder
}

// MockMigrationJobModelMockRecorder is the mock recorder for MockMigrationJobModel
type MockMigrationJobModelMockRecorder struct {
	mock *MockMigrationJobModel
}

// NewMockMigrationJobModel creates a new mock instance
func NewMockMigrationJobModel(ctrl *gomock.Controller) *MockMigrationJobModel {
	mock := &MockMigrationJobModel{ctrl: ctrl}
	mock.recorder = &MockMigrationJobModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMigrationJobModel) EXPECT() *MockMigrationJobModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMigrationJobModel) Create(arg0 domain.UserID, arg1 domain.AppspaceID, arg2 domain.Version, arg3 bool) (*domain.MigrationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.MigrationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMigrationJobModelMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMigrationJobModel)(nil).Create), arg0, arg1, arg2, arg3)
}

// DeleteForAppspace mocks base method
func (m *MockMigrationJobModel) DeleteForAppspace(arg0 domain.AppspaceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForAppspace", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForAppspace indicates an expected call of DeleteForAppspace
func (mr *MockMigrationJobModelMockRecorder) DeleteForAppspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForAppspace", reflect.TypeOf((*MockMigrationJobModel)(nil).DeleteForAppspace), arg0)
}

// GetForAppspace mocks base method
func (m *MockMigrationJobModel) GetForAppspace(arg0 domain.AppspaceID) ([]*domain.MigrationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForAppspace", arg0)
	ret0, _ := ret[0].([]*domain.MigrationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForAppspace indicates an expected call of GetForAppspace
func (mr *MockMigrationJobModelMockRecorder) GetForAppspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForAppspace", reflect.TypeOf((*MockMigrationJobModel)(nil).GetForAppspace), arg0)
}

// GetJob mocks base method
func (m *MockMigrationJobModel) GetJob(arg0 domain.JobID) (*domain.MigrationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0)
	ret0, _ := ret[0].(*domain.MigrationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob
func (mr *MockMigrationJobModelMockRecorder) GetJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockMigrationJobModel)(nil).GetJob), arg0)
}

// GetPending mocks base method
func (m *MockMigrationJobModel) GetPending() ([]*domain.MigrationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPending")
	ret0, _ := ret[0].([]*domain.MigrationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPending indicates an expected call of GetPending
func (mr *MockMigrationJobModelMockRecorder) GetPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPending", reflect.TypeOf((*MockMigrationJobModel)(nil).GetPending))
}

// GetRunning mocks base method
func (m *MockMigrationJobModel) GetRunning() ([]domain.MigrationJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunning")
	ret0, _ := ret[0].([]domain.MigrationJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunning indicates an expected call of GetRunning
func (mr *MockMigrationJobModelMockRecorder) GetRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunning", reflect.TypeOf((*MockMigrationJobModel)(nil).GetRunning))
}

// SetFinished mocks base method
func (m *MockMigrationJobModel) SetFinished(arg0 domain.JobID, arg1 nulltypes.NullString) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFinished", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFinished indicates an expected call of SetFinished
func (mr *MockMigrationJobModelMockRecorder) SetFinished(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinished", reflect.TypeOf((*MockMigrationJobModel)(nil).SetFinished), arg0, arg1)
}

// SetStarted mocks base method
func (m *MockMigrationJobModel) SetStarted(arg0 domain.JobID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStarted", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStarted indicates an expected call of SetStarted
func (mr *MockMigrationJobModelMockRecorder) SetStarted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStarted", reflect.TypeOf((*MockMigrationJobModel)(nil).SetStarted), arg0)
}

// MockSandboxRuns is a mock of SandboxRuns interface
type MockSandboxRuns struct {
	ctrl     *gomock.Controller
	recorder *MockSandboxRunsMockRecorder
}

// MockSandboxRunsMockRecorder is the mock recorder for MockSandboxRuns
type MockSandboxRunsMockRecorder struct {
	mock *MockSandboxRuns
}

// NewMockSandboxRuns creates a new mock instance
func NewMockSandboxRuns(ctrl *gomock.Controller) *MockSandboxRuns {
	mock := &MockSandboxRuns{ctrl: ctrl}
	mock.recorder = &MockSandboxRunsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSandboxRuns) EXPECT() *MockSandboxRunsMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSandboxRuns) Create(arg0 domain.SandboxRunIDs, arg1 time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSandboxRunsMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSandboxRuns)(nil).Create), arg0, arg1)
}

// End mocks base method
func (m *MockSandboxRuns) End(arg0 int, arg1 time.Time, arg2 domain.SandboxRunData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "End", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// End indicates an expected call of End
func (mr *MockSandboxRunsMockRecorder) End(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockSandboxRuns)(nil).End), arg0, arg1, arg2)
}
