// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teleclimber/DropServer/cmd/ds-host/testmocks (interfaces: AppspaceMetaDB,AppspaceInfoModel,UsersV0)

// Package testmocks is a generated GoMock package.
package testmocks

import (
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	domain "github.com/teleclimber/DropServer/cmd/ds-host/domain"
	reflect "reflect"
)

// MockAppspaceMetaDB is a mock of AppspaceMetaDB interface
type MockAppspaceMetaDB struct {
	ctrl     *gomock.Controller
	recorder *MockAppspaceMetaDBMockRecorder
}

// MockAppspaceMetaDBMockRecorder is the mock recorder for MockAppspaceMetaDB
type MockAppspaceMetaDBMockRecorder struct {
	mock *MockAppspaceMetaDB
}

// NewMockAppspaceMetaDB creates a new mock instance
func NewMockAppspaceMetaDB(ctrl *gomock.Controller) *MockAppspaceMetaDB {
	mock := &MockAppspaceMetaDB{ctrl: ctrl}
	mock.recorder = &MockAppspaceMetaDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppspaceMetaDB) EXPECT() *MockAppspaceMetaDBMockRecorder {
	return m.recorder
}

// CloseConn mocks base method
func (m *MockAppspaceMetaDB) CloseConn(arg0 domain.AppspaceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConn", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConn indicates an expected call of CloseConn
func (mr *MockAppspaceMetaDBMockRecorder) CloseConn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConn", reflect.TypeOf((*MockAppspaceMetaDB)(nil).CloseConn), arg0)
}

// Create mocks base method
func (m *MockAppspaceMetaDB) Create(arg0 domain.AppspaceID, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAppspaceMetaDBMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAppspaceMetaDB)(nil).Create), arg0, arg1)
}

// GetHandle mocks base method
func (m *MockAppspaceMetaDB) GetHandle(arg0 domain.AppspaceID) (*sqlx.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHandle", arg0)
	ret0, _ := ret[0].(*sqlx.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHandle indicates an expected call of GetHandle
func (mr *MockAppspaceMetaDBMockRecorder) GetHandle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHandle", reflect.TypeOf((*MockAppspaceMetaDB)(nil).GetHandle), arg0)
}

// MockAppspaceInfoModel is a mock of AppspaceInfoModel interface
type MockAppspaceInfoModel struct {
	ctrl     *gomock.Controller
	recorder *MockAppspaceInfoModelMockRecorder
}

// MockAppspaceInfoModelMockRecorder is the mock recorder for MockAppspaceInfoModel
type MockAppspaceInfoModelMockRecorder struct {
	mock *MockAppspaceInfoModel
}

// NewMockAppspaceInfoModel creates a new mock instance
func NewMockAppspaceInfoModel(ctrl *gomock.Controller) *MockAppspaceInfoModel {
	mock := &MockAppspaceInfoModel{ctrl: ctrl}
	mock.recorder = &MockAppspaceInfoModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppspaceInfoModel) EXPECT() *MockAppspaceInfoModelMockRecorder {
	return m.recorder
}

// GetSchema mocks base method
func (m *MockAppspaceInfoModel) GetSchema(arg0 domain.AppspaceID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema
func (mr *MockAppspaceInfoModelMockRecorder) GetSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockAppspaceInfoModel)(nil).GetSchema), arg0)
}

// SetSchema mocks base method
func (m *MockAppspaceInfoModel) SetSchema(arg0 domain.AppspaceID, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSchema", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSchema indicates an expected call of SetSchema
func (mr *MockAppspaceInfoModelMockRecorder) SetSchema(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSchema", reflect.TypeOf((*MockAppspaceInfoModel)(nil).SetSchema), arg0, arg1)
}

// MockUsersV0 is a mock of UsersV0 interface
type MockUsersV0 struct {
	ctrl     *gomock.Controller
	recorder *MockUsersV0MockRecorder
}

// MockUsersV0MockRecorder is the mock recorder for MockUsersV0
type MockUsersV0MockRecorder struct {
	mock *MockUsersV0
}

// NewMockUsersV0 creates a new mock instance
func NewMockUsersV0(ctrl *gomock.Controller) *MockUsersV0 {
	mock := &MockUsersV0{ctrl: ctrl}
	mock.recorder = &MockUsersV0MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsersV0) EXPECT() *MockUsersV0MockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUsersV0) Create(arg0 domain.AppspaceID, arg1, arg2 string) (domain.ProxyID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.ProxyID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUsersV0MockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersV0)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockUsersV0) Delete(arg0 domain.AppspaceID, arg1 domain.ProxyID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUsersV0MockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsersV0)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockUsersV0) Get(arg0 domain.AppspaceID, arg1 domain.ProxyID) (domain.AppspaceUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(domain.AppspaceUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUsersV0MockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsersV0)(nil).Get), arg0, arg1)
}

// GetAll mocks base method
func (m *MockUsersV0) GetAll(arg0 domain.AppspaceID) ([]domain.AppspaceUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]domain.AppspaceUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUsersV0MockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUsersV0)(nil).GetAll), arg0)
}

// GetByDropID mocks base method
func (m *MockUsersV0) GetByDropID(arg0 domain.AppspaceID, arg1 string) (domain.AppspaceUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDropID", arg0, arg1)
	ret0, _ := ret[0].(domain.AppspaceUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDropID indicates an expected call of GetByDropID
func (mr *MockUsersV0MockRecorder) GetByDropID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDropID", reflect.TypeOf((*MockUsersV0)(nil).GetByDropID), arg0, arg1)
}

// UpdateMeta mocks base method
func (m *MockUsersV0) UpdateMeta(arg0 domain.AppspaceID, arg1 domain.ProxyID, arg2, arg3 string, arg4 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeta", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMeta indicates an expected call of UpdateMeta
func (mr *MockUsersV0MockRecorder) UpdateMeta(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeta", reflect.TypeOf((*MockUsersV0)(nil).UpdateMeta), arg0, arg1, arg2, arg3, arg4)
}
