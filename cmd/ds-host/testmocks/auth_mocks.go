// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teleclimber/DropServer/cmd/ds-host/testmocks (interfaces: Authenticator,V0TokenManager,V0RequestToken,DS2DS)

// Package testmocks is a generated GoMock package.
package testmocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/teleclimber/DropServer/cmd/ds-host/domain"
	http "net/http"
	reflect "reflect"
)

// MockAuthenticator is a mock of Authenticator interface
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// AppspaceUserProxyID mocks base method
func (m *MockAuthenticator) AppspaceUserProxyID(arg0 http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppspaceUserProxyID", arg0)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// AppspaceUserProxyID indicates an expected call of AppspaceUserProxyID
func (mr *MockAuthenticatorMockRecorder) AppspaceUserProxyID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppspaceUserProxyID", reflect.TypeOf((*MockAuthenticator)(nil).AppspaceUserProxyID), arg0)
}

// SetForAccount mocks base method
func (m *MockAuthenticator) SetForAccount(arg0 http.ResponseWriter, arg1 domain.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetForAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetForAccount indicates an expected call of SetForAccount
func (mr *MockAuthenticatorMockRecorder) SetForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetForAccount", reflect.TypeOf((*MockAuthenticator)(nil).SetForAccount), arg0, arg1)
}

// SetForAppspace mocks base method
func (m *MockAuthenticator) SetForAppspace(arg0 http.ResponseWriter, arg1 domain.ProxyID, arg2 domain.AppspaceID, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetForAppspace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetForAppspace indicates an expected call of SetForAppspace
func (mr *MockAuthenticatorMockRecorder) SetForAppspace(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetForAppspace", reflect.TypeOf((*MockAuthenticator)(nil).SetForAppspace), arg0, arg1, arg2, arg3)
}

// Unset mocks base method
func (m *MockAuthenticator) Unset(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unset", arg0, arg1)
}

// Unset indicates an expected call of Unset
func (mr *MockAuthenticatorMockRecorder) Unset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unset", reflect.TypeOf((*MockAuthenticator)(nil).Unset), arg0, arg1)
}

// MockV0TokenManager is a mock of V0TokenManager interface
type MockV0TokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockV0TokenManagerMockRecorder
}

// MockV0TokenManagerMockRecorder is the mock recorder for MockV0TokenManager
type MockV0TokenManagerMockRecorder struct {
	mock *MockV0TokenManager
}

// NewMockV0TokenManager creates a new mock instance
func NewMockV0TokenManager(ctrl *gomock.Controller) *MockV0TokenManager {
	mock := &MockV0TokenManager{ctrl: ctrl}
	mock.recorder = &MockV0TokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockV0TokenManager) EXPECT() *MockV0TokenManagerMockRecorder {
	return m.recorder
}

// CheckToken mocks base method
func (m *MockV0TokenManager) CheckToken(arg0 domain.AppspaceID, arg1 string) (domain.V0AppspaceLoginToken, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken", arg0, arg1)
	ret0, _ := ret[0].(domain.V0AppspaceLoginToken)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CheckToken indicates an expected call of CheckToken
func (mr *MockV0TokenManagerMockRecorder) CheckToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockV0TokenManager)(nil).CheckToken), arg0, arg1)
}

// GetForOwner mocks base method
func (m *MockV0TokenManager) GetForOwner(arg0 domain.AppspaceID, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForOwner", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForOwner indicates an expected call of GetForOwner
func (mr *MockV0TokenManagerMockRecorder) GetForOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForOwner", reflect.TypeOf((*MockV0TokenManager)(nil).GetForOwner), arg0, arg1)
}

// SendLoginToken mocks base method
func (m *MockV0TokenManager) SendLoginToken(arg0 domain.AppspaceID, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLoginToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLoginToken indicates an expected call of SendLoginToken
func (mr *MockV0TokenManagerMockRecorder) SendLoginToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLoginToken", reflect.TypeOf((*MockV0TokenManager)(nil).SendLoginToken), arg0, arg1, arg2)
}

// MockV0RequestToken is a mock of V0RequestToken interface
type MockV0RequestToken struct {
	ctrl     *gomock.Controller
	recorder *MockV0RequestTokenMockRecorder
}

// MockV0RequestTokenMockRecorder is the mock recorder for MockV0RequestToken
type MockV0RequestTokenMockRecorder struct {
	mock *MockV0RequestToken
}

// NewMockV0RequestToken creates a new mock instance
func NewMockV0RequestToken(ctrl *gomock.Controller) *MockV0RequestToken {
	mock := &MockV0RequestToken{ctrl: ctrl}
	mock.recorder = &MockV0RequestTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockV0RequestToken) EXPECT() *MockV0RequestTokenMockRecorder {
	return m.recorder
}

// ReceiveError mocks base method
func (m *MockV0RequestToken) ReceiveError(arg0 string, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveError", arg0, arg1)
}

// ReceiveError indicates an expected call of ReceiveError
func (mr *MockV0RequestTokenMockRecorder) ReceiveError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveError", reflect.TypeOf((*MockV0RequestToken)(nil).ReceiveError), arg0, arg1)
}

// ReceiveToken mocks base method
func (m *MockV0RequestToken) ReceiveToken(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReceiveToken", arg0, arg1)
}

// ReceiveToken indicates an expected call of ReceiveToken
func (mr *MockV0RequestTokenMockRecorder) ReceiveToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveToken", reflect.TypeOf((*MockV0RequestToken)(nil).ReceiveToken), arg0, arg1)
}

// RequestToken mocks base method
func (m *MockV0RequestToken) RequestToken(arg0 context.Context, arg1 domain.UserID, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestToken", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestToken indicates an expected call of RequestToken
func (mr *MockV0RequestTokenMockRecorder) RequestToken(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestToken", reflect.TypeOf((*MockV0RequestToken)(nil).RequestToken), arg0, arg1, arg2, arg3)
}

// MockDS2DS is a mock of DS2DS interface
type MockDS2DS struct {
	ctrl     *gomock.Controller
	recorder *MockDS2DSMockRecorder
}

// MockDS2DSMockRecorder is the mock recorder for MockDS2DS
type MockDS2DSMockRecorder struct {
	mock *MockDS2DS
}

// NewMockDS2DS creates a new mock instance
func NewMockDS2DS(ctrl *gomock.Controller) *MockDS2DS {
	mock := &MockDS2DS{ctrl: ctrl}
	mock.recorder = &MockDS2DSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDS2DS) EXPECT() *MockDS2DSMockRecorder {
	return m.recorder
}

// GetClient mocks base method
func (m *MockDS2DS) GetClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient
func (mr *MockDS2DSMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockDS2DS)(nil).GetClient))
}

// GetRemoteAPIVersion mocks base method
func (m *MockDS2DS) GetRemoteAPIVersion(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteAPIVersion", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteAPIVersion indicates an expected call of GetRemoteAPIVersion
func (mr *MockDS2DSMockRecorder) GetRemoteAPIVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteAPIVersion", reflect.TypeOf((*MockDS2DS)(nil).GetRemoteAPIVersion), arg0)
}
