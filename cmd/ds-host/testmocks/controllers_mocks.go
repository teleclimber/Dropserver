// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teleclimber/DropServer/cmd/ds-host/testmocks (interfaces: SetupKey,RemoteAppGetter,DeleteApp,BackupAppspace,RestoreAppspace,MigrationJobController,AppspaceStatus,AppspaceRouter)

// Package testmocks is a generated GoMock package.
package testmocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/teleclimber/DropServer/cmd/ds-host/domain"
	io "io"
	http "net/http"
	reflect "reflect"
)

// MockSetupKey is a mock of SetupKey interface
type MockSetupKey struct {
	ctrl     *gomock.Controller
	recorder *MockSetupKeyMockRecorder
}

// MockSetupKeyMockRecorder is the mock recorder for MockSetupKey
type MockSetupKeyMockRecorder struct {
	mock *MockSetupKey
}

// NewMockSetupKey creates a new mock instance
func NewMockSetupKey(ctrl *gomock.Controller) *MockSetupKey {
	mock := &MockSetupKey{ctrl: ctrl}
	mock.recorder = &MockSetupKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetupKey) EXPECT() *MockSetupKeyMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockSetupKey) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSetupKeyMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSetupKey)(nil).Delete))
}

// Get mocks base method
func (m *MockSetupKey) Get() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSetupKeyMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSetupKey)(nil).Get))
}

// Has mocks base method
func (m *MockSetupKey) Has() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has
func (mr *MockSetupKeyMockRecorder) Has() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockSetupKey)(nil).Has))
}

// MockRemoteAppGetter is a mock of RemoteAppGetter interface
type MockRemoteAppGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteAppGetterMockRecorder
}

// MockRemoteAppGetterMockRecorder is the mock recorder for MockRemoteAppGetter
type MockRemoteAppGetterMockRecorder struct {
	mock *MockRemoteAppGetter
}

// NewMockRemoteAppGetter creates a new mock instance
func NewMockRemoteAppGetter(ctrl *gomock.Controller) *MockRemoteAppGetter {
	mock := &MockRemoteAppGetter{ctrl: ctrl}
	mock.recorder = &MockRemoteAppGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteAppGetter) EXPECT() *MockRemoteAppGetterMockRecorder {
	return m.recorder
}

// FetchPackageJob mocks base method
func (m *MockRemoteAppGetter) FetchPackageJob(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPackageJob", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPackageJob indicates an expected call of FetchPackageJob
func (mr *MockRemoteAppGetterMockRecorder) FetchPackageJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPackageJob", reflect.TypeOf((*MockRemoteAppGetter)(nil).FetchPackageJob), arg0)
}

// FetchValidListing mocks base method
func (m *MockRemoteAppGetter) FetchValidListing(arg0 string) (domain.AppListingFetch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchValidListing", arg0)
	ret0, _ := ret[0].(domain.AppListingFetch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchValidListing indicates an expected call of FetchValidListing
func (mr *MockRemoteAppGetterMockRecorder) FetchValidListing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchValidListing", reflect.TypeOf((*MockRemoteAppGetter)(nil).FetchValidListing), arg0)
}

// MockDeleteApp is a mock of DeleteApp interface
type MockDeleteApp struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteAppMockRecorder
}

// MockDeleteAppMockRecorder is the mock recorder for MockDeleteApp
type MockDeleteAppMockRecorder struct {
	mock *MockDeleteApp
}

// NewMockDeleteApp creates a new mock instance
func NewMockDeleteApp(ctrl *gomock.Controller) *MockDeleteApp {
	mock := &MockDeleteApp{ctrl: ctrl}
	mock.recorder = &MockDeleteAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeleteApp) EXPECT() *MockDeleteAppMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockDeleteApp) Delete(arg0 domain.AppID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDeleteAppMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeleteApp)(nil).Delete), arg0)
}

// DeleteVersion mocks base method
func (m *MockDeleteApp) DeleteVersion(arg0 domain.AppID, arg1 domain.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVersion indicates an expected call of DeleteVersion
func (mr *MockDeleteAppMockRecorder) DeleteVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVersion", reflect.TypeOf((*MockDeleteApp)(nil).DeleteVersion), arg0, arg1)
}

// MockBackupAppspace is a mock of BackupAppspace interface
type MockBackupAppspace struct {
	ctrl     *gomock.Controller
	recorder *MockBackupAppspaceMockRecorder
}

// MockBackupAppspaceMockRecorder is the mock recorder for MockBackupAppspace
type MockBackupAppspaceMockRecorder struct {
	mock *MockBackupAppspace
}

// NewMockBackupAppspace creates a new mock instance
func NewMockBackupAppspace(ctrl *gomock.Controller) *MockBackupAppspace {
	mock := &MockBackupAppspace{ctrl: ctrl}
	mock.recorder = &MockBackupAppspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackupAppspace) EXPECT() *MockBackupAppspaceMockRecorder {
	return m.recorder
}

// BackupNoPause mocks base method
func (m *MockBackupAppspace) BackupNoPause(arg0 domain.AppspaceID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupNoPause", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupNoPause indicates an expected call of BackupNoPause
func (mr *MockBackupAppspaceMockRecorder) BackupNoPause(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupNoPause", reflect.TypeOf((*MockBackupAppspace)(nil).BackupNoPause), arg0)
}

// CreateBackup mocks base method
func (m *MockBackupAppspace) CreateBackup(arg0 domain.AppspaceID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackup", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackup indicates an expected call of CreateBackup
func (mr *MockBackupAppspaceMockRecorder) CreateBackup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockBackupAppspace)(nil).CreateBackup), arg0)
}

// MockRestoreAppspace is a mock of RestoreAppspace interface
type MockRestoreAppspace struct {
	ctrl     *gomock.Controller
	recorder *MockRestoreAppspaceMockRecorder
}

// MockRestoreAppspaceMockRecorder is the mock recorder for MockRestoreAppspace
type MockRestoreAppspaceMockRecorder struct {
	mock *MockRestoreAppspace
}

// NewMockRestoreAppspace creates a new mock instance
func NewMockRestoreAppspace(ctrl *gomock.Controller) *MockRestoreAppspace {
	mock := &MockRestoreAppspace{ctrl: ctrl}
	mock.recorder = &MockRestoreAppspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRestoreAppspace) EXPECT() *MockRestoreAppspaceMockRecorder {
	return m.recorder
}

// CheckAppspaceDataValid mocks base method
func (m *MockRestoreAppspace) CheckAppspaceDataValid(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAppspaceDataValid", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAppspaceDataValid indicates an expected call of CheckAppspaceDataValid
func (mr *MockRestoreAppspaceMockRecorder) CheckAppspaceDataValid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAppspaceDataValid", reflect.TypeOf((*MockRestoreAppspace)(nil).CheckAppspaceDataValid), arg0)
}

// GetMetaInfo mocks base method
func (m *MockRestoreAppspace) GetMetaInfo(arg0 string) (domain.AppspaceMetaInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaInfo", arg0)
	ret0, _ := ret[0].(domain.AppspaceMetaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetaInfo indicates an expected call of GetMetaInfo
func (mr *MockRestoreAppspaceMockRecorder) GetMetaInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaInfo", reflect.TypeOf((*MockRestoreAppspace)(nil).GetMetaInfo), arg0)
}

// Prepare mocks base method
func (m *MockRestoreAppspace) Prepare(arg0 io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (mr *MockRestoreAppspaceMockRecorder) Prepare(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockRestoreAppspace)(nil).Prepare), arg0)
}

// PrepareBackup mocks base method
func (m *MockRestoreAppspace) PrepareBackup(arg0 domain.AppspaceID, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareBackup", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareBackup indicates an expected call of PrepareBackup
func (mr *MockRestoreAppspaceMockRecorder) PrepareBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareBackup", reflect.TypeOf((*MockRestoreAppspace)(nil).PrepareBackup), arg0, arg1)
}

// ReplaceData mocks base method
func (m *MockRestoreAppspace) ReplaceData(arg0 string, arg1 domain.AppspaceID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceData indicates an expected call of ReplaceData
func (mr *MockRestoreAppspaceMockRecorder) ReplaceData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceData", reflect.TypeOf((*MockRestoreAppspace)(nil).ReplaceData), arg0, arg1)
}

// MockMigrationJobController is a mock of MigrationJobController interface
type MockMigrationJobController struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationJobControllerMockRecorder
}

// MockMigrationJobControllerMockRecorder is the mock recorder for MockMigrationJobController
type MockMigrationJobControllerMockRecorder struct {
	mock *MockMigrationJobController
}

// NewMockMigrationJobController creates a new mock instance
func NewMockMigrationJobController(ctrl *gomock.Controller) *MockMigrationJobController {
	mock := &MockMigrationJobController{ctrl: ctrl}
	mock.recorder = &MockMigrationJobControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMigrationJobController) EXPECT() *MockMigrationJobControllerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockMigrationJobController) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockMigrationJobControllerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMigrationJobController)(nil).Start))
}

// Stop mocks base method
func (m *MockMigrationJobController) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockMigrationJobControllerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMigrationJobController)(nil).Stop))
}

// WakeUp mocks base method
func (m *MockMigrationJobController) WakeUp() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WakeUp")
}

// WakeUp indicates an expected call of WakeUp
func (mr *MockMigrationJobControllerMockRecorder) WakeUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WakeUp", reflect.TypeOf((*MockMigrationJobController)(nil).WakeUp))
}

// MockAppspaceStatus is a mock of AppspaceStatus interface
type MockAppspaceStatus struct {
	ctrl     *gomock.Controller
	recorder *MockAppspaceStatusMockRecorder
}

// MockAppspaceStatusMockRecorder is the mock recorder for MockAppspaceStatus
type MockAppspaceStatusMockRecorder struct {
	mock *MockAppspaceStatus
}

// NewMockAppspaceStatus creates a new mock instance
func NewMockAppspaceStatus(ctrl *gomock.Controller) *MockAppspaceStatus {
	mock := &MockAppspaceStatus{ctrl: ctrl}
	mock.recorder = &MockAppspaceStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppspaceStatus) EXPECT() *MockAppspaceStatusMockRecorder {
	return m.recorder
}

// IsLockedClosed mocks base method
func (m *MockAppspaceStatus) IsLockedClosed(arg0 domain.AppspaceID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLockedClosed", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLockedClosed indicates an expected call of IsLockedClosed
func (mr *MockAppspaceStatusMockRecorder) IsLockedClosed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLockedClosed", reflect.TypeOf((*MockAppspaceStatus)(nil).IsLockedClosed), arg0)
}

// IsTempPaused mocks base method
func (m *MockAppspaceStatus) IsTempPaused(arg0 domain.AppspaceID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTempPaused", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTempPaused indicates an expected call of IsTempPaused
func (mr *MockAppspaceStatusMockRecorder) IsTempPaused(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTempPaused", reflect.TypeOf((*MockAppspaceStatus)(nil).IsTempPaused), arg0)
}

// LockClosed mocks base method
func (m *MockAppspaceStatus) LockClosed(arg0 domain.AppspaceID) (chan struct{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockClosed", arg0)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LockClosed indicates an expected call of LockClosed
func (mr *MockAppspaceStatusMockRecorder) LockClosed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockClosed", reflect.TypeOf((*MockAppspaceStatus)(nil).LockClosed), arg0)
}

// Ready mocks base method
func (m *MockAppspaceStatus) Ready(arg0 domain.AppspaceID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ready indicates an expected call of Ready
func (mr *MockAppspaceStatusMockRecorder) Ready(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockAppspaceStatus)(nil).Ready), arg0)
}

// SetHostStop mocks base method
func (m *MockAppspaceStatus) SetHostStop(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHostStop", arg0)
}

// SetHostStop indicates an expected call of SetHostStop
func (mr *MockAppspaceStatusMockRecorder) SetHostStop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHostStop", reflect.TypeOf((*MockAppspaceStatus)(nil).SetHostStop), arg0)
}

// Track mocks base method
func (m *MockAppspaceStatus) Track(arg0 domain.AppspaceID) domain.AppspaceStatusEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Track", arg0)
	ret0, _ := ret[0].(domain.AppspaceStatusEvent)
	return ret0
}

// Track indicates an expected call of Track
func (mr *MockAppspaceStatusMockRecorder) Track(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockAppspaceStatus)(nil).Track), arg0)
}

// WaitStopped mocks base method
func (m *MockAppspaceStatus) WaitStopped(arg0 domain.AppspaceID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitStopped", arg0)
}

// WaitStopped indicates an expected call of WaitStopped
func (mr *MockAppspaceStatusMockRecorder) WaitStopped(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitStopped", reflect.TypeOf((*MockAppspaceStatus)(nil).WaitStopped), arg0)
}

// WaitTempPaused mocks base method
func (m *MockAppspaceStatus) WaitTempPaused(arg0 domain.AppspaceID, arg1 string) chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitTempPaused", arg0, arg1)
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// WaitTempPaused indicates an expected call of WaitTempPaused
func (mr *MockAppspaceStatusMockRecorder) WaitTempPaused(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitTempPaused", reflect.TypeOf((*MockAppspaceStatus)(nil).WaitTempPaused), arg0, arg1)
}

// MockAppspaceRouter is a mock of AppspaceRouter interface
type MockAppspaceRouter struct {
	ctrl     *gomock.Controller
	recorder *MockAppspaceRouterMockRecorder
}

// MockAppspaceRouterMockRecorder is the mock recorder for MockAppspaceRouter
type MockAppspaceRouterMockRecorder struct {
	mock *MockAppspaceRouter
}

// NewMockAppspaceRouter creates a new mock instance
func NewMockAppspaceRouter(ctrl *gomock.Controller) *MockAppspaceRouter {
	mock := &MockAppspaceRouter{ctrl: ctrl}
	mock.recorder = &MockAppspaceRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppspaceRouter) EXPECT() *MockAppspaceRouterMockRecorder {
	return m.recorder
}

// ServeHTTP mocks base method
func (m *MockAppspaceRouter) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP
func (mr *MockAppspaceRouterMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockAppspaceRouter)(nil).ServeHTTP), arg0, arg1)
}

// SubscribeLiveCount mocks base method
func (m *MockAppspaceRouter) SubscribeLiveCount(arg0 domain.AppspaceID, arg1 chan<- int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeLiveCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	return ret0
}

// SubscribeLiveCount indicates an expected call of SubscribeLiveCount
func (mr *MockAppspaceRouterMockRecorder) SubscribeLiveCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeLiveCount", reflect.TypeOf((*MockAppspaceRouter)(nil).SubscribeLiveCount), arg0, arg1)
}

// UnsubscribeLiveCount mocks base method
func (m *MockAppspaceRouter) UnsubscribeLiveCount(arg0 domain.AppspaceID, arg1 chan<- int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsubscribeLiveCount", arg0, arg1)
}

// UnsubscribeLiveCount indicates an expected call of UnsubscribeLiveCount
func (mr *MockAppspaceRouterMockRecorder) UnsubscribeLiveCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeLiveCount", reflect.TypeOf((*MockAppspaceRouter)(nil).UnsubscribeLiveCount), arg0, arg1)
}
